diff -Naur orig/package.json modified/package.json
--- orig/package.json	2025-08-13 18:56:40.668743050 +0000
+++ modified/package.json	2025-08-13 18:56:49.916651673 +0000
@@ -11,7 +11,9 @@
   "dependencies": {
     "react": "19.1.0",
     "react-dom": "19.1.0",
-    "next": "15.4.6"
+    "next": "15.4.6",
+    "@prisma/client": "^5",
+    "prisma": "^5"
   },
   "devDependencies": {
     "typescript": "^5",
@@ -22,6 +24,10 @@
     "tailwindcss": "^4",
     "eslint": "^9",
     "eslint-config-next": "15.4.6",
-    "@eslint/eslintrc": "^3"
+    "@eslint/eslintrc": "^3",
+    "ts-node": "^10.9.2"
+  },
+  "prisma": {
+    "seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
   }
 }
diff -Naur orig/prisma/schema.prisma modified/prisma/schema.prisma
--- orig/prisma/schema.prisma	1970-01-01 00:00:00.000000000 +0000
+++ modified/prisma/schema.prisma	2025-08-13 18:56:59.660552848 +0000
@@ -0,0 +1,71 @@
+generator client {
+  provider = "prisma-client-js"
+}
+
+datasource db {
+  provider = "sqlite"
+  url      = env("DATABASE_URL")
+}
+
+model Service {
+  id               String   @id @default(cuid())
+  name             String   @unique
+  description      String?
+  setupPrice       Int
+  monthlyPrice     Int?
+  isActive         Boolean  @default(true)
+  createdAt        DateTime @default(now())
+  updatedAt        DateTime @updatedAt
+  planServices     PlanService[]
+}
+
+model ConsumableType {
+  id            String         @id @default(cuid())
+  name          String         @unique
+  unitLabel     String
+  rates         ConsumableRate[]
+  usageRecords  UsageRecord[]
+}
+
+model ConsumableRate {
+  id               String         @id @default(cuid())
+  consumableTypeId String
+  unitPrice        Float
+  currency         String         @default("USD")
+  createdAt        DateTime       @default(now())
+  consumableType   ConsumableType @relation(fields: [consumableTypeId], references: [id])
+}
+
+model Plan {
+  id           String         @id @default(cuid())
+  name         String         @unique
+  description  String?
+  baseMonthly  Int?
+  createdAt    DateTime       @default(now())
+  updatedAt    DateTime       @updatedAt
+  services     PlanService[]
+  usageRecords UsageRecord[]
+}
+
+model PlanService {
+  id           String   @id @default(cuid())
+  planId       String
+  serviceId    String
+  setupPrice   Int?
+  monthlyPrice Int?
+  plan       Plan     @relation(fields: [planId], references: [id])
+  service    Service  @relation(fields: [serviceId], references: [id])
+  @@unique([planId, serviceId])
+}
+
+model UsageRecord {
+  id               String   @id @default(cuid())
+  planId           String
+  consumableTypeId String
+  quantity         Int
+  periodStart      DateTime
+  periodEnd        DateTime
+  createdAt        DateTime @default(now())
+  plan             Plan            @relation(fields: [planId], references: [id])
+  consumableType   ConsumableType  @relation(fields: [consumableTypeId], references: [id])
+}
diff -Naur orig/prisma/seed.ts modified/prisma/seed.ts
--- orig/prisma/seed.ts	1970-01-01 00:00:00.000000000 +0000
+++ modified/prisma/seed.ts	2025-08-13 18:57:09.636449990 +0000
@@ -0,0 +1,65 @@
+import { PrismaClient } from "@prisma/client";
+const prisma = new PrismaClient();
+
+async function main() {
+  // Servicios (centavos)
+  const servicesData = [
+    { name: "Implementación GHL Básica", setupPrice: 29900, monthlyPrice: 0 },
+    { name: "Embudo Avanzado",           setupPrice: 49900, monthlyPrice: 4900 },
+    { name: "Soporte Prioritario",       setupPrice: 0,     monthlyPrice: 9900 },
+  ];
+  for (const s of servicesData) {
+    await prisma.service.upsert({
+      where: { name: s.name },
+      update: { setupPrice: s.setupPrice, monthlyPrice: s.monthlyPrice },
+      create: { name: s.name, setupPrice: s.setupPrice, monthlyPrice: s.monthlyPrice },
+    });
+  }
+
+  // Consumibles
+  const ctEmails = await prisma.consumableType.upsert({
+    where: { name: "emails" }, update: {}, create: { name: "emails", unitLabel: "email" },
+  });
+  const ctSMS = await prisma.consumableType.upsert({
+    where: { name: "sms" }, update: {}, create: { name: "sms", unitLabel: "sms" },
+  });
+  const ctIA = await prisma.consumableType.upsert({
+    where: { name: "ia" }, update: {}, create: { name: "ia", unitLabel: "token" },
+  });
+
+  // Rates (replace existing)
+  await prisma.consumableRate.deleteMany({});
+  await prisma.consumableRate.createMany({
+    data: [
+      { consumableTypeId: ctEmails.id, unitPrice: 0.001,  currency: "USD" },
+      { consumableTypeId: ctSMS.id,    unitPrice: 0.03,   currency: "USD" },
+      { consumableTypeId: ctIA.id,     unitPrice: 0.0005, currency: "USD" },
+    ],
+  });
+
+  // Plan
+  const plan = await prisma.plan.upsert({
+    where: { name: "Plan Starter" },
+    update: { baseMonthly: 2900 },
+    create: { name: "Plan Starter", baseMonthly: 2900 },
+  });
+
+  // Link all services to the plan
+  const services = await prisma.service.findMany();
+  for (const s of services) {
+    await prisma.planService.upsert({
+      where: { planId_serviceId: { planId: plan.id, serviceId: s.id } },
+      update: {},
+      create: { planId: plan.id, serviceId: s.id },
+    });
+  }
+}
+
+main()
+  .catch((e) => {
+    console.error(e);
+    process.exit(1);
+  })
+  .finally(async () => {
+    await prisma.$disconnect();
+  });
diff -Naur orig/src/app/admin/services/page.tsx modified/src/app/admin/services/page.tsx
--- orig/src/app/admin/services/page.tsx	1970-01-01 00:00:00.000000000 +0000
+++ modified/src/app/admin/services/page.tsx	2025-08-13 18:57:30.408242142 +0000
@@ -0,0 +1,58 @@
+"use client";
+import { useEffect, useState } from "react";
+
+export default function ServicesAdmin() {
+  const [services, setServices] = useState<any[]>([]);
+  const [form, setForm] = useState({ name: "", description: "", setupPrice: "", monthlyPrice: "" });
+
+  const load = async () => {
+    const res = await fetch("/api/services");
+    setServices(await res.json());
+  };
+
+  useEffect(() => { load(); }, []);
+
+  const submit = async (e: React.FormEvent) => {
+    e.preventDefault();
+    await fetch("/api/services", {
+      method: "POST",
+      headers: { "Content-Type": "application/json" },
+      body: JSON.stringify({
+        name: form.name,
+        description: form.description,
+        setupPrice: Number(form.setupPrice),
+        monthlyPrice: form.monthlyPrice ? Number(form.monthlyPrice) : null,
+      }),
+    });
+    setForm({ name: "", description: "", setupPrice: "", monthlyPrice: "" });
+    load();
+  };
+
+  return (
+    <main className="p-6 max-w-3xl mx-auto">
+      <h1 className="text-2xl font-bold mb-4">Servicios — The Hublab</h1>
+      <form onSubmit={submit} className="grid gap-2 mb-6">
+        <input className="border p-2 rounded" placeholder="Nombre"
+          value={form.name} onChange={e => setForm({ ...form, name: e.target.value })} />
+        <input className="border p-2 rounded" placeholder="Descripción"
+          value={form.description} onChange={e => setForm({ ...form, description: e.target.value })} />
+        <input className="border p-2 rounded" placeholder="Precio implementación"
+          value={form.setupPrice} onChange={e => setForm({ ...form, setupPrice: e.target.value })} />
+        <input className="border p-2 rounded" placeholder="Precio mensual (opcional)"
+          value={form.monthlyPrice} onChange={e => setForm({ ...form, monthlyPrice: e.target.value })} />
+        <button className="bg-black text-white rounded p-2">Guardar</button>
+      </form>
+      <ul className="space-y-2">
+        {services.map(s => (
+          <li key={s.id} className="border rounded p-3">
+            <div className="font-semibold">{s.name}</div>
+            <div className="text-sm text-gray-600">{s.description}</div>
+            <div className="text-sm">
+              Setup: ${"" + s.setupPrice} {s.monthlyPrice ? ` | Mensual: $${"" + s.monthlyPrice}` : ""}
+            </div>
+          </li>
+        ))}
+      </ul>
+    </main>
+  );
+}
diff -Naur orig/src/app/api/services/route.ts modified/src/app/api/services/route.ts
--- orig/src/app/api/services/route.ts	1970-01-01 00:00:00.000000000 +0000
+++ modified/src/app/api/services/route.ts	2025-08-13 18:57:18.464360951 +0000
@@ -0,0 +1,34 @@
+import { NextRequest, NextResponse } from "next/server";
+import { PrismaClient } from "@prisma/client";
+const prisma = new PrismaClient();
+
+export async function GET() {
+  const rows = await prisma.service.findMany({ orderBy: { createdAt: "desc" } });
+  const services = rows.map((s) => ({
+    ...s,
+    setupPrice: s.setupPrice / 100,
+    monthlyPrice: s.monthlyPrice != null ? s.monthlyPrice / 100 : null,
+  }));
+  return NextResponse.json(services);
+}
+
+export async function POST(req: NextRequest) {
+  const body = await req.json();
+  const { name, description, setupPrice, monthlyPrice } = body;
+  if (!name || setupPrice == null) {
+    return NextResponse.json({ error: "name y setupPrice son requeridos" }, { status: 400 });
+  }
+  const created = await prisma.service.create({
+    data: {
+      name,
+      description,
+      setupPrice: Math.round(Number(setupPrice) * 100),
+      monthlyPrice: monthlyPrice != null ? Math.round(Number(monthlyPrice) * 100) : null,
+    },
+  });
+  return NextResponse.json({
+    ...created,
+    setupPrice: created.setupPrice / 100,
+    monthlyPrice: created.monthlyPrice != null ? created.monthlyPrice / 100 : null,
+  }, { status: 201 });
+}
